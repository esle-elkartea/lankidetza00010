package ${package}.managers;

import java.util.logging.Logger;
import net.idtoki.amicyf.torque.data.${table.JavaName}Peer;
import net.idtoki.amicyf.torque.data.group.${table.JavaName}GroupBean;
import net.idtoki.amicyf.torque.data.${table.JavaName}Peer;
import net.idtoki.amicyf.utils.SearchQuery;
import net.idtoki.amicyf.utils.Util;
import org.apache.torque.TorqueException;

#foreach ($fk in $table.ForeignKeys)
  #set ( $tblFK = $table.Database.getTable($fk.ForeignTableName) )
import ${tblFK.Package}.${tblFK.JavaName};
import ${tblFK.Package}.${tblFK.JavaName}Peer;
#end

import org.apache.torque.util.Criteria;
import org.apache.torque.util.UniqueList;

/**
#if ($addTimeStamp)
 * This class was autogenerated by Torque on:
 *
 * [$now]
 *
#end
 */
public abstract class Base${table.JavaName}Manager {
   private static final Logger logger = Logger.getLogger(
   "net.idtoki.amicyf.maquina.managers.Base${table.JavaName}Manager");
   
   public static final Criteria buildSearchCriteria(String query){
      Criteria criteria = new Criteria();
      SearchQuery searchQuery = new SearchQuery(query);
      UniqueList or = searchQuery.getOrUniqueList();
      UniqueList and = searchQuery.getAndUniqueList();
      for(int i=0;i<or.size();i++){
        SearchQuery.SingelQuery criterio = (SearchQuery.SingelQuery)or.get(i);
        addOrSearchCriteria(criteria,criterio.getCampo(),criterio.getValor());
      }
      for(int i=0;i<and.size();i++){
        SearchQuery.SingelQuery criterio = (SearchQuery.SingelQuery)and.get(i);
        addAndSearchCriteria(criteria,criterio.getCampo(),criterio.getValor());
      }
      return criteria;
   }

   private static final void addOrSearchCriteria(Criteria criteria,String campo,String valor){
      Criteria.Criterion criterion = Base${table.JavaName}Manager.getSearchCriterion(campo,valor);
      criteria.or(criterion);
   }

   private static final void addAndSearchCriteria(Criteria criteria,String campo, String valor){
      Criteria.Criterion criterion = Base${table.JavaName}Manager.getSearchCriterion(campo,valor);
      criteria.and(criterion);
   }

   private static final Criteria.Criterion getSearchCriterion(String campo,String valor){
      Criteria criteria =  new Criteria();
      #set ($test=1)
      #foreach ($col in $table.Columns)
       #set ( $cup=$col.Name.toUpperCase() )
       #if($col.isPrimaryKey() && ($test != 0))
        Criteria.Criterion criterion = criteria.getNewCriterion(${table.JavaName}Peer.$cup ,-1+"",Criteria.EQUAL);
        #set ($test=0)
       #end
       if(campo.equals(Base${table.JavaName}Manager.campoToLowerCase(${table.JavaName}Peer.$cup)) || campo.equals("all"))
        Util.addOrLikeCriteria(criterion,${table.JavaName}Peer.$cup,valor,true);    
      #end
      
      return criterion;
   }
   
   private static final String campoToLowerCase(String tablaCampo){
      return tablaCampo.substring(tablaCampo.lastIndexOf("."),tablaCampo.length()).toLowerCase();
   }

  public static final ${table.JavaName}GroupBean get${table.JavaName}s() {
    return Base${table.JavaName}Manager.get${table.JavaName}s(false);
  }

  public static final ${table.JavaName}GroupBean get${table.JavaName}s(boolean paginado) {
    return Base${table.JavaName}Manager.get${table.JavaName}s(new Criteria(), paginado,0);
  }
  
  public static final ${table.JavaName}GroupBean get${table.JavaName}s(Criteria criteria,boolean paginado, int pagina) {
   ${table.JavaName}GroupBean obj${table.JavaName}GroupBean = new ${table.JavaName}GroupBean();
   obj${table.JavaName}GroupBean.setPaginaActual(pagina);
   obj${table.JavaName}GroupBean.set${table.JavaName}s(criteria, paginado);
   return obj${table.JavaName}GroupBean;
  }
   	






#if ($complexObjectModel)

  ##
  ## setup joins
  ##
  #set ( $className = $table.JavaName )
  #set ( $countFK = 0 )
  #foreach ($dummyFK in $table.ForeignKeys)
    #set ( $countFK = $countFK + 1 )
  #end

  #if ($countFK >= 1)
 private static void addJoins(Criteria criteria)
        throws TorqueException
    {

  #foreach ($fk in $table.ForeignKeys)
    #set ( $tblFK = $table.Database.getTable($fk.ForeignTableName) )
    #if (!$tblFK.isForReferenceOnly())
      ## want to cover this case, but the code is not there yet.
      #if ( !($fk.ForeignTableName.equals($table.Name)) )
        #set ( $partJoinName = "" )
        #foreach ($columnName in $fk.LocalColumns)
          #set ( $column = $table.getColumn($columnName) )
          #if ($column.isMultipleFK() || $fk.ForeignTableName.equals($table.Name))
            #set ( $partJoinName = "$partJoinName$column.JavaName" )
          #end
        #end

        #set ( $joinTable = $table.Database.getTable($fk.ForeignTableName) )
        #set ( $joinClassName = $joinTable.JavaName )
        #set ($interfaceName = $joinTable.JavaName)
        #if ($joinTable.Interface)
          #set ($interfaceName = $joinTable.Interface)
        #end

        #if ($partJoinName == "")
          #set ( $joinColumnId = $joinClassName )
          #set ( $joinInterface = $interfaceName )
          #set ( $collThisTable = "${className}s" )
          #set ( $collThisTableMs = $className )
        #else
          #set ( $joinColumnId= "${joinClassName}RelatedBy$partJoinName" )
          #set ( $joinInterface= "${interfaceName}RelatedBy$partJoinName" )
          #set ( $collThisTable="${className}sRelatedBy$partJoinName" )
          #set ( $collThisTableMs="${className}RelatedBy$partJoinName" )
        #end
        #set ( $lfMap = $fk.LocalForeignMapping )

        #foreach ($columnName in $fk.LocalColumns)
          #set ( $column = $table.getColumn($columnName) )
          #set ( $columnFk = $joinTable.getColumn( $lfMap.get($columnName) ) )
        criteria.addJoin(${table.JavaName}Peer.$column.Name.toUpperCase(),
            ${joinClassName}Peer.$columnFk.Name.toUpperCase());
        #end
      #end
    #end
  #end
}
  #end	
#end
}

