package ${package}.managers;

import java.util.logging.Logger;
import ${package}.${table.JavaName}Peer;
import ${package}.group.${table.JavaName}GroupBean;
import ${package}.${table.JavaName};
import net.zylk.torque.SearchQuery;
import net.zylk.torque.TorqueUtils;
import org.apache.torque.TorqueException;


#foreach ($fk in $table.ForeignKeys)
  #set ( $tblFK = $table.Database.getTable($fk.ForeignTableName) )
import ${tblFK.Package}.${tblFK.JavaName};
import ${tblFK.Package}.${tblFK.JavaName}Peer;
#end

import org.apache.torque.util.Criteria;
import org.apache.torque.util.UniqueList;

/**
#if ($addTimeStamp)
 * This class was autogenerated by Torque on:
 *
 * [$now]
 *
#end
 */
public abstract class Base${table.JavaName}Manager {
   private static final Logger logger = Logger.getLogger(
   "net.idtoki.amicyf.maquina.managers.Base${table.JavaName}Manager");
   
   public static final Criteria buildSearchCriteria(String query){
      Criteria criteria = new Criteria();
      SearchQuery searchQuery = new SearchQuery(query);
      UniqueList or = searchQuery.getOrUniqueList();
      UniqueList and = searchQuery.getAndUniqueList();
      for(int i=0;i<or.size();i++){
        SearchQuery.SingelQuery criterio = (SearchQuery.SingelQuery)or.get(i);
        addOrSearchCriteria(criteria,criterio.getCampo(),criterio.getValor());
      }
      for(int i=0;i<and.size();i++){
        SearchQuery.SingelQuery criterio = (SearchQuery.SingelQuery)and.get(i);
        addAndSearchCriteria(criteria,criterio.getCampo(),criterio.getValor());
      }
      return criteria;
   }

   private static final void addOrSearchCriteria(Criteria criteria,String campo,String valor){
      Criteria.Criterion criterion = Base${table.JavaName}Manager.getSearchCriterion(campo,valor);
      criteria.or(criterion);
   }

   private static final void addAndSearchCriteria(Criteria criteria,String campo, String valor){
      Criteria.Criterion criterion = Base${table.JavaName}Manager.getSearchCriterion(campo,valor);
      criteria.and(criterion);
   }

   private static final Criteria.Criterion getSearchCriterion(String campo,String valor){
      Criteria criteria =  new Criteria();
      TorqueUtils.addFalseCondition(criteria);
      Criteria.Criterion criterion = TorqueUtils.getFalseCriterion(criteria);
      #foreach ($col in $table.Columns)
       #set ( $cup=$col.Name.toUpperCase() )
       if(campo.equals(Base${table.JavaName}Manager.campoToLowerCase(${table.JavaName}Peer.$cup)) || campo.equals("all"))
        TorqueUtils.addOrLikeCriteria(criterion,${table.JavaName}Peer.$cup,valor,true);    
      #end
      
      return criterion;
   }
   
   private static final String campoToLowerCase(String tablaCampo){
      return tablaCampo.substring(tablaCampo.lastIndexOf("."),tablaCampo.length()).toLowerCase();
   }

  public static final ${table.JavaName}GroupBean get${table.JavaName}s() {
    return Base${table.JavaName}Manager.get${table.JavaName}s(false);
  }

  public static final ${table.JavaName}GroupBean get${table.JavaName}s(boolean paginado) {
    return Base${table.JavaName}Manager.get${table.JavaName}s(new Criteria(), paginado,0);
  }
  
  public static final ${table.JavaName}GroupBean get${table.JavaName}s(Criteria c) {
	    return Base${table.JavaName}Manager.get${table.JavaName}s(c,false,0);
	  }
  
  public static final ${table.JavaName}GroupBean get${table.JavaName}s(Criteria criteria,boolean paginado, int pagina) {
   ${table.JavaName}GroupBean obj${table.JavaName}GroupBean = new ${table.JavaName}GroupBean();
   obj${table.JavaName}GroupBean.setPaginaActual(pagina);
   obj${table.JavaName}GroupBean.set${table.JavaName}s(criteria, paginado);
   return obj${table.JavaName}GroupBean;
  }
  public static final ${table.JavaName} get${table.JavaName}(int id) {
	  	 Criteria c = new Criteria();
	  	 #foreach ($pk in $table.PrimaryKey)
	    c.add(${table.JavaName}Peer.${pk.Name.toUpperCase()}, id);
	   #end
	   return Base${table.JavaName}Manager.${table.JavaName}sGroupBean2${table.JavaName}(Base${table.JavaName}Manager.get${table.JavaName}s(c));
  }
  public static final ${table.JavaName} ${table.JavaName}sGroupBean2${table.JavaName}(${table.JavaName}GroupBean obj){
	  	 if(obj.size() == 1)
		    return obj.get${table.JavaName}(0);
	   else
    		return null;
   }
  private void update${table.JavaName}Attribute(int id, String valor, String campo) throws Exception
  {
	   ${table.JavaName} obj = Base${table.JavaName}Manager.get${table.JavaName}(id);
	   #foreach ($col in $table.Columns)
    #set ( $cfc=$col.JavaName )
    #set ( $clo=$col.UncapitalisedJavaName )
    #set ( $cjtype = $col.JavaNative )
	    if(campo.equals(${table.JavaName}Peer.${col.Name.toUpperCase()}))
	    #if ($cjtype == 'int')
		     obj.set${cfc}(Integer.parseInt(valor)); //$cjtype
		    #else
     obj.set${cfc}(valor); //$cjtype
	    #end
   #end
	   obj.save();
  }

 #foreach ($col in $table.Columns)
  #set ( $cfc=$col.JavaName )
  #set ( $clo=$col.UncapitalisedJavaName )
  #set ( $cjtype = $col.JavaNative )
  public void update${cfc}(int id, String valor) throws Exception
  {
	   update${table.JavaName}Attribute(id, valor, ${table.JavaName}Peer.${col.Name.toUpperCase()});
  }
	 #end
	
#if ($complexObjectModel)
#set ( $className = $table.JavaName )
#set ( $countFK = 0 )
#foreach ($dummyFK in $table.ForeignKeys)
#set ( $countFK = $countFK + 1 )
#end
#if ($countFK >= 1)
  private static void addJoins(Criteria criteria) throws TorqueException
  {
#foreach ($fk in $table.ForeignKeys)
#set ( $tblFK = $table.Database.getTable($fk.ForeignTableName) )
#if (!$tblFK.isForReferenceOnly())
## want to cover this case, but the code is not there yet.
#if ( !($fk.ForeignTableName.equals($table.Name)) )
#set ( $partJoinName = "" )
#foreach ($columnName in $fk.LocalColumns)
#set ( $column = $table.getColumn($columnName) )
#if ($column.isMultipleFK() || $fk.ForeignTableName.equals($table.Name))
#set ( $partJoinName = "$partJoinName$column.JavaName" )
#end
#end
#set ( $joinTable = $table.Database.getTable($fk.ForeignTableName) )
#set ( $joinClassName = $joinTable.JavaName )
#set ($interfaceName = $joinTable.JavaName)
#if ($joinTable.Interface)
#set ($interfaceName = $joinTable.Interface)
#end
#if ($partJoinName == "")
#set ( $joinColumnId = $joinClassName )
#set ( $joinInterface = $interfaceName )
#set ( $collThisTable = "${className}s" )
#set ( $collThisTableMs = $className )
#else
#set ( $joinColumnId= "${joinClassName}RelatedBy$partJoinName" )
#set ( $joinInterface= "${interfaceName}RelatedBy$partJoinName" )
#set ( $collThisTable="${className}sRelatedBy$partJoinName" )
#set ( $collThisTableMs="${className}RelatedBy$partJoinName" )
#end
#set ( $lfMap = $fk.LocalForeignMapping )
#foreach ($columnName in $fk.LocalColumns)
#set ( $column = $table.getColumn($columnName) )
#set ( $columnFk = $joinTable.getColumn( $lfMap.get($columnName) ) )
   criteria.addJoin(${table.JavaName}Peer.$column.Name.toUpperCase(),
   ${joinClassName}Peer.$columnFk.Name.toUpperCase());
#end
#end
#end
#end
  }
 #end	
#end
}

