package ${package}.group;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.lang.reflect.InvocationTargetException;
import java.util.logging.Logger;
import net.idtoki.amicyf.utils.Util;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Criteria.*;
import org.apache.torque.util.Transaction;

/**
#if ($addTimeStamp)
 * This class was autogenerated by Torque on:
 *
 * [$now]
 *
#end
 */
public abstract class BaseGroupBean {
  protected Vector almacen = new Vector();
  protected int posicion = -1;
  private int posicionActual = 0;
  protected boolean isEmpty;
  protected int size = 0;
  protected int limiteInferior = -1;
  protected int limiteSuperior = -1;
  protected int paginaActual = -1;
  protected int paginaUltima = -1;
  protected int offset = -1;
  protected int limit = -1;
  protected int selected = -1;
  protected Criteria cri = null;
  
  private static final String CABECERA_XML = "<?xml version='1.0' encoding='ISO-8859-1'?>";
  private static final String RESULT_TAG="result";
  private int NUM_REGISTROS_PAGINA = 10;
 #foreach ($databaseName in $databaseNames)
  private String databaseName = "$databaseName";
 #end
    
  /** el logger para esta clase */	
  private static final Logger logger = Logger
			.getLogger("${package}.group.BaseGroupBean");
  protected String dbField;
   
  public void setNumeroElementosPorPagina(int elementosPorPagina){
    this.NUM_REGISTROS_PAGINA = elementosPorPagina;
  }
  public int getNumeroElementosPorPagina(){
    return  this.NUM_REGISTROS_PAGINA;
  } 
   
  public void setCriteria(Criteria criteria){
    this.cri = criteria;
  }
  public Criteria getCriteria(){
    return this.cri;
  }
  public void setPaginaUltima(int numberOfRecords){
    int pagina = -1;
    if (numberOfRecords%NUM_REGISTROS_PAGINA == 0){
      pagina = (numberOfRecords / NUM_REGISTROS_PAGINA) -1;
    }else{
      pagina = numberOfRecords / NUM_REGISTROS_PAGINA;
    }
    if(this.paginaUltima == -1){
    	logger.finest("\n\nPOR PAGINAS NUEVAS: "+pagina);
    	this.paginaUltima = pagina;
    	logger.finest("\n\nPOR PAGINAS PAGINA ACTUAL: "+this.paginaActual);
    }else{
    	this.paginaUltima += pagina;
    	logger.finest("\n\nPOR PAGINAS AÑADIDAS: "+pagina);
    	logger.finest("\n\nPOR PAGINAS AÑADIDAS ACTUAL: "+this.paginaActual);
    }
  }
  public int getPaginaUltima(){
    return this.paginaUltima;
  }
  public int getPaginaSiguiente(){
    return this.paginaActual +1;
  }
  public int getPaginaAnterior(){
    return this.paginaActual -1;
  }
  protected void setLimitesPaginacion(){
    this.limiteInferior = NUM_REGISTROS_PAGINA*this.paginaActual;
    this.offset = this.limiteInferior;
    this.limiteSuperior = NUM_REGISTROS_PAGINA*this.paginaActual + NUM_REGISTROS_PAGINA;
    this.limit = this.limiteSuperior-this.limiteInferior;
  }
  public int getOffset(){
    return this.offset;
  }
  public int getSelectedId(){
    return this.selected;
  }
  public void setSelectedId(int selected){
    this.selected = selected;
  }

  public int getLimit(){
    return this.limit;
  }

  public void restartPosicion(){
    this.setPosicionActual(0);
    this.setPosicion(-1);
  }
  public void setPaginaActual(int pagina){
    this.paginaActual = pagina;
  }
  public int getPaginaActual(){
    return this.paginaActual;
  }
  public void setPosicion(int posicion){
    this.posicion = posicion;
  }
  public void setPosicionActual(int posicion){
  this.posicionActual = posicion;
  }
  public void setLimiteInferior(int limiteInferior){
   this.limiteInferior = limiteInferior;
  }
  public void setLimiteSuperior(int limiteSuperior){
   this.limiteSuperior = limiteSuperior;
  }
  public int getLimiteInferior(){
   return this.limiteInferior;
  }
  public int getLimiteSuperior(){
   return this.limiteSuperior;
  }
  public void setIsEmpty(boolean isEmpty){
   this.isEmpty = isEmpty;
  }
  public boolean getIsEmpty(){
    return this.isEmpty;
  }
  public boolean next(){
    if (this.posicionActual < this.size){
      this.posicion += 1;
      this.posicionActual += 1;
      return true;
    }else{
      return false;
    }
  }
  protected void createVector(List listaElementos){
    if (!listaElementos.isEmpty()){
      Iterator it = listaElementos.iterator();
      while(it.hasNext()){
        almacen.add(it.next());
        this.size += 1;
      }
    }else{
      this.setIsEmpty(true);
    }
  }
  public void setElemento(Object obj){
    almacen.add(obj);
    this.size += 1;
  }
  
  public Object getNext(){	
  	return almacen.get(this.posicion);
  }
  public Object get(int posicion){
    return almacen.get(posicion);
  }  
  public void removeElemento(int posicion) {
    almacen.remove(posicion);
    this.size--;
  }

  public int size(){
    if(!this.isEmpty){
      return this.size;
    }else{
      return 0;
    }
  }
  
  public Connection getTransConnection(String databaseName){
    Connection conn = null;
    try{
    	logger.finest("iniciando la conexion con transaccion sobre la base de datos: "+databaseName);
    	conn =Transaction.begin(databaseName);
    	logger.finest("iniciando conexion+transaccion realizada sobre la base de datos: "+databaseName);
    }catch(TorqueException te){
    	logger.severe("no se ha podido iniciar la transaccion");
    	logger.severe("error: "+ te.getMessage());
    }
  	return conn;
  }
  
  public Connection getTransConnection(){
    Connection conn = null;
    try{
    	logger.finest("iniciando la conexion con transaccion sobre la base de datos: "+this.databaseName);
    	conn =Transaction.begin(this.databaseName);
    	logger.finest("iniciando conexion+transaccion realizada sobre la base de datos: "+this.databaseName);
    }catch(TorqueException te){
    	logger.severe("no se ha podido iniciar la transaccion");
    	logger.severe("error: "+ te.getMessage());
    }
  	return conn;
  }
  public void commit(Connection conn){
  	try{
  		Transaction.commit(conn);
  	}catch(TorqueException te) {
  		logger.severe("no se ha podido realizar el commit");
    	logger.severe("error: "+ te.getMessage());
  	}
  }
  
  public void safeRollback(Connection conn){
  		Transaction.safeRollback(conn);  		
  }
  
  
  
  //EHI : Generalizacion de metodos
  public void setElementos(Criteria criteria, boolean paginado){
    if(paginado){
      Criteria fashionClone = BaseGroupBean.fashionClone(criteria);
      this.setPaginaUltima(fashionClone);
      criteria.setOffset(this.getLimiteInferior());
      criteria.setLimit(this.getLimiteSuperior()-this.getLimiteInferior());
    }
    try{
    	this.createVector(abstractSelect(criteria));
      //super.shutdownTorque();
    }catch (TorqueException te){
      te.printStackTrace();
    }
  }
  
  public abstract List abstractSelect(Criteria c) throws TorqueException;
  
  private void setPaginaUltima(Criteria criteria){
    int numberOfRecords = 0;
    String dbdist = null;
    String dbcalc = null;
    List selectModify = criteria.getSelectModifiers();
    Iterator selectModifyI = selectModify.iterator();
    String modificador = null;
    while(selectModifyI.hasNext()){
    	modificador = (String)selectModifyI.next();
    	if(modificador.startsWith("DISTINCT".trim())){
    		dbdist = "DISTINCT ";
    	}
    }
    if(dbdist != null){
    	dbcalc = dbdist + dbField;
    }else{
    	dbcalc = dbField;
    }
    criteria.addSelectColumn("COUNT(" + dbcalc + ")");
    try{
      List result = abstractVillageRecords(criteria);
      com.workingdogs.village.Record record = (com.workingdogs.village.Record) result.get(0);
      numberOfRecords = record.getValue(1).asInt();
    }catch(Exception te) {
      te.printStackTrace();
    }
    logger.finest("\n\nNUMERO DE REGISTROS DEVUELTOS POR EL PAGINADO: "+numberOfRecords+"\n\n");
    logger.finest("\n\n "+criteria.toString()+"\n\n");
    
    this.setPaginaUltima(numberOfRecords);
    this.setLimitesPaginacion();
  }

  public abstract List abstractVillageRecords(Criteria c) throws TorqueException;
  
  /*
   * este método inserta/actualiza en la base de datos el conjunto de elementos que hay en almacen
   * realiza una transacción para  
   */
  public void save() throws TorqueException {
  	Connection conn = this.getTransConnection();
    try {
    	abstractSave(conn);
    	this.commit(conn);
    }catch(Exception e) {
    	e.printStackTrace();
      // si ha habido algun error, Rollback al canto!
      this.safeRollback(conn);
      throw new TorqueException();
    }finally{
    	//reinicion los contadores del almacen
    	this.restartPosicion();
    }
  }

  public abstract void abstractSave(Connection conn) throws TorqueException;
  
  public void del() throws TorqueException {
  	Connection conn = this.getTransConnection();
    try {
    	abstractDel(conn);
    	//hago el commit
    	this.commit(conn);
    }catch(Exception e) {
      // si ha habido algun error, Rollback al canto!
      this.safeRollback(conn);
      throw new TorqueException();
    }finally{
    	//reinicion los contadores del almacen
    	this.restartPosicion();
    }
  }
  public abstract void abstractDel(Connection conn) throws TorqueException;
  
  private static Criteria fashionClone(Criteria criteria){
  	Criteria fashionClon = new Criteria();
//  para la clonacion de las joins
    List listL = criteria.getJoinL();
    List listR = criteria.getJoinR();
    String de = null;
    String iz = null;
    logger.finest("\n\nentrando en fashion clone");
    if ( listL != null && listR != null && !listL.isEmpty()){
      logger.finest("\n\nclonando una JOIN: ");
      Iterator leftI =  listL.iterator();
      Iterator rightI =  listR.iterator();
      while(leftI.hasNext()){
        iz = leftI.next().toString();
        de = rightI.next().toString();
        logger.finest("\n\nnombre: "+iz);
      	logger.finest("\n\nnombre: "+de);
        fashionClon.addJoin(iz,de);
      }
    }
//  para la clonacion de los where
    Enumeration enu  = criteria.elements();
    logger.finest("\n\ncolnando las condiciones: ");
    while(enu.hasMoreElements()){
      Criteria.Criterion criterion = (Criterion) enu.nextElement();
      logger.finest("\n\ncondicion : "+criterion.toString());
      fashionClon.add(criterion);
    } 
    List selectModify = criteria.getSelectModifiers();
    Iterator selectModifyI = selectModify.iterator();
    String modificador = null;
    while(selectModifyI.hasNext()){
      modificador = (String)selectModifyI.next();
      if(modificador.startsWith("DISTINCT".trim())){
      logger.finest("\n\nMODIFICADOR DEL SELECT AÑADIDO AL FASHION-CLONE\n\n"+modificador);
      fashionClon.setDistinct();
      }
    }
  /*
    List orden =  criteria.getOrderByColumns();
    Iterator ordenI = orden.iterator();
    String o = null;
    while(ordenI.hasNext()){
      o = ordenI.next().toString();
      if(o.endsWith(" ASC")){
        //añadimos el criterio de ordenacion ascendente
        fashionClon.addAscendingOrderByColumn(o.substring(0,o.length()-4));
      }else if (o.endsWith(" DESC")){
        //añadimos el criterio de ordenacion descendiente
        fashionClon.addDescendingOrderByColumn(o.substring(0,o.length()-5));
      }
    }
  */
    logger.finest("\n\nfashionclone devuelto : "+fashionClon.toString());
    logger.finest("\n\ncrteria inicial: "+criteria.toString());
    logger.finest("SON IGUALES: "+criteria.toString().equals(fashionClon.toString()));
    return fashionClon;
  }
   private static void buildXmlRequestFromBean(StringBuffer result, Object obj, boolean cabecera){
    if(cabecera){
  		result.append(CABECERA_XML);
  		result.append("<");result.append(RESULT_TAG);result.append(">");
  	}
  	Class clase;
    Method metodo, metodos[];
    String metodoS = null;
    String valorS = null;
    // Cargamos la clase
    clase = obj.getClass();
    // Recorremos los campos
    metodos = clase.getMethods();
    
    //insertamos el principio del tag del objeto
    String nombre = obj.getClass().getName().substring(obj.getClass().getName().lastIndexOf(".")+1,obj.getClass().getName().length());
    result.append("<");result.append(nombre);result.append(">");
    for (int i=0; i < metodos.length; i++) {
    	metodo = metodos[i];
    	if(metodo.getName().indexOf("get") >= 0 && (metodo.getReturnType().toString().equals(int.class.toString()) || metodo.getReturnType().toString().equals(String.class.toString()))){ 
    		metodoS =  metodo.getName();
    		try{
    			valorS = metodo.invoke(obj, null).toString();
    		}catch(Exception e){
    			logger.severe("Error: ");
    		}
    			result.append("<");result.append(metodoS.substring("get".length(),metodoS.length()));result.append(">");
			result.append(Util.replaceSpecialChars(valorS));
    			result.append("</");result.append(metodoS.substring("get".length(),metodoS.length()));result.append(">");
    		}
    	//si hay un metodo que devuelve un group bean invocamos abuild xml otra vez
    	if(isGroupBeanMethod(metodo)){
			BaseGroupBean obj2 = null;
			obj2 = getBaseGroupBean(metodo,obj);
			logger.info("Nombre del metodo: tipo: "+metodo.getName()+" - "+metodo.getReturnType().toString());
			logger.info("\ntamaño de las maquinas-manteniminetos: "+obj2.size());
			if(obj2!=null){
				BaseGroupBean.buildXmlRequestFromGroupBean(result,obj2,false);
			}
    	}
    }
    //insertamos el final del o tag del objeto
    result.append("</");result.append(nombre);result.append(">");
    if(cabecera){
    	result.append("</");result.append(RESULT_TAG);result.append(">");
    }
  }
    
  private static void buildXmlRequestFromGroupBean(StringBuffer result, BaseGroupBean obj, boolean cabecera){
	  logger.finest("Escribiendo el objeto: \n\n"+result.toString()+"\n\n hasta aqui");
	  logger.finest("el numero de elementos del objeto: "+obj.size());
	  while(obj.next()){
		  BaseGroupBean.buildXmlRequestFromBean(result,obj.getNext(),cabecera);
	  }
  }
  public StringBuffer buildXml(){
	StringBuffer result =  new StringBuffer(CABECERA_XML);
	result.append("<");result.append(RESULT_TAG);result.append(">");
	BaseGroupBean.buildXmlRequestFromGroupBean(result,this, false);
	result.append("</");result.append(RESULT_TAG);result.append(">");
	this.restartPosicion();
	logger.finest("FINAL: "+result);
	logger.finest("RESULTADO: "+result.toString());
	return result;
  }
  private static boolean isGroupBeanMethod(Method method){
	  return method.getReturnType().toString().equals(BaseGroupBean.class.toString());
  }
  private static BaseGroupBean getBaseGroupBean(Method method, Object obj){
	  try{
		return  (BaseGroupBean) method.invoke(obj, null);
	  }
	  catch (InvocationTargetException ite){
		logger.severe(ite.getMessage());
		return null;
	  }
	  catch (IllegalAccessException iae){
		logger.severe(iae.getMessage());
		return null;
	  }
  }
}

